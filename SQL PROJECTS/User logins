Background of the Problem:
You are tasked with analyzing user login behavior using two tables: USERS and LOGINS. The USERS table contains details about each user, including their ID, name, and status (active or inactive). The LOGINS table records user logins with timestamps, session IDs, and session scores, linking back to the USERS table through the user_id foreign key.

The management is interested in understanding the login patterns of users over time, such as identifying who logged in, the frequency of logins, the score of each session, and login behavior over different time periods. The goal is to generate insights that can help in decision-making and possibly improve user engagement and system performance.

Objectives:
1)Identify users who haven't logged in for the past 5 months: Management wants to know which users have not logged into the system for the last 5 months to potentially re-engage them.

2)Count of users and sessions per quarter: A summary of the number of users and login sessions that occurred each quarter, ordered from the most recent to the oldest, is needed for quarterly performance tracking.

3)Users logged in January 2024 but not November 2023: Compare login behavior between two specific months to find users who logged in during January 2024 but not in November 2023.

4)Percentage change in sessions between consecutive quarters: Management wants to track the percentage change in login sessions from one quarter to the next, helping them evaluate trends in user engagement.

5)Users with the highest session score each day: Find which users had the highest session score on each day, providing insights into the most engaged users daily.

6)Users with daily logins since their first login: Determine which users have logged in every single day since their first recorded login, indicating extremely active users.

7)Dates with no logins at all: Identify the specific dates on which no logins occurred to track system inactivity and better understand periods of downtime.

CREATE TABLE users (
    USER_ID INT PRIMARY KEY,
    USER_NAME VARCHAR(20) NOT NULL,
    USER_STATUS VARCHAR(20) NOT NULL
);

CREATE TABLE logins (
    USER_ID INT,
    LOGIN_TIMESTAMP DATETIME NOT NULL,
    SESSION_ID INT PRIMARY KEY,
    SESSION_SCORE INT,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- Users Table
INSERT INTO USERS VALUES (1, 'Alice', 'Active');
INSERT INTO USERS VALUES (2, 'Bob', 'Inactive');
INSERT INTO USERS VALUES (3, 'Charlie', 'Active');
INSERT INTO USERS  VALUES (4, 'David', 'Active');
INSERT INTO USERS  VALUES (5, 'Eve', 'Inactive');
INSERT INTO USERS  VALUES (6, 'Frank', 'Active');
INSERT INTO USERS  VALUES (7, 'Grace', 'Inactive');
INSERT INTO USERS  VALUES (8, 'Heidi', 'Active');
INSERT INTO USERS VALUES (9, 'Ivan', 'Inactive');
INSERT INTO USERS VALUES (10, 'Judy', 'Active');

-- Logins Table 

INSERT INTO LOGINS  VALUES (1, '2023-07-15 09:30:00', 1001, 85);
INSERT INTO LOGINS  VALUES (2, '2023-07-22 10:00:00', 1002, 90);
INSERT INTO LOGINS  VALUES (3, '2023-08-10 11:15:00', 1003, 75);
INSERT INTO LOGINS  VALUES (4, '2023-08-20 14:00:00', 1004, 88);
INSERT INTO LOGINS  VALUES (5, '2023-09-05 16:45:00', 1005, 82);
INSERT INTO LOGINS  VALUES (6, '2023-10-12 08:30:00', 1006, 77);
INSERT INTO LOGINS  VALUES (7, '2023-11-18 09:00:00', 1007, 81);
INSERT INTO LOGINS  VALUES (8, '2023-12-01 10:30:00', 1008, 84);
INSERT INTO LOGINS  VALUES (9, '2023-12-15 13:15:00', 1009, 79);
INSERT INTO LOGINS  VALUES (1, '2024-01-10 07:45:00', 1011, 86);
INSERT INTO LOGINS  VALUES (2, '2024-01-25 09:30:00', 1012, 89);
INSERT INTO LOGINS  VALUES (3, '2024-02-05 11:00:00', 1013, 78);
INSERT INTO LOGINS  VALUES (4, '2024-03-01 14:30:00', 1014, 91);
INSERT INTO LOGINS  VALUES (5, '2024-03-15 16:00:00', 1015, 83);
INSERT INTO LOGINS  VALUES (6, '2024-04-12 08:00:00', 1016, 80);
INSERT INTO LOGINS  VALUES (7, '2024-05-18 09:15:00', 1017, 82);
INSERT INTO LOGINS  VALUES (8, '2024-05-28 10:45:00', 1018, 87);
INSERT INTO LOGINS  VALUES (9, '2024-06-15 13:30:00', 1019, 76);
INSERT INTO LOGINS  VALUES (10, '2024-06-25 15:00:00', 1010, 92);
INSERT INTO LOGINS  VALUES (10, '2024-06-26 15:45:00', 1020, 93);
INSERT INTO LOGINS  VALUES (10, '2024-06-27 15:00:00', 1021, 92);
INSERT INTO LOGINS  VALUES (10, '2024-06-28 15:45:00', 1022, 93);
INSERT INTO LOGINS  VALUES (1, '2024-01-10 07:45:00', 1101, 86);
INSERT INTO LOGINS  VALUES (3, '2024-01-25 09:30:00', 1102, 89);
INSERT INTO LOGINS  VALUES (5, '2024-01-15 11:00:00', 1103, 78);
INSERT INTO LOGINS  VALUES (2, '2023-11-10 07:45:00', 1201, 82);
INSERT INTO LOGINS  VALUES (4, '2023-11-25 09:30:00', 1202, 84);
INSERT INTO LOGINS  VALUES (6, '2023-11-15 11:00:00', 1203, 80);


--select * from users;
--select * from logins;

--1) Which users did not log in during the past 5 months?

SELECT U.USER_ID,U.USER_NAME,MAX(L.LOGIN_TIMESTAMP) AS LAST_LOGIN	--DATEADD(MONTH,-5,GETDATE())-- THIS WILL GIVE THE DATE 5 MONTHS IN THE PAST FROM NOW
FROM USERS U
INNER JOIN LOGINS L
ON U.USER_ID=L.USER_ID
GROUP BY U.USER_ID,U.USER_NAME
HAVING MAX(L.LOGIN_TIMESTAMP)<=DATEADD(MONTH,-5,GETDATE());

--2) How many users and sessions were there in each quarter, ordered from newest to oldest? Return 1st day of the quarter, user count,session count.

SELECT DATETRUNC(QUARTER,MIN(LOGIN_TIMESTAMP)) AS QUARTER_1STDAY,COUNT(DISTINCT USER_ID) AS USER_COUNT, COUNT(SESSION_ID) AS SESSION_COUNT
FROM LOGINS
GROUP BY DATEPART(QUARTER,LOGIN_TIMESTAMP) 
ORDER BY QUARTER_1STDAY DESC;

--3) Which users logged in during January 2024 but did not log in during November 2023?

SELECT DISTINCT U.USER_ID,U.USER_NAME
FROM USERS U
INNER JOIN LOGINS L
ON U.USER_ID=L.USER_ID
WHERE L.LOGIN_TIMESTAMP BETWEEN '2024-01-01' AND '2024-01-31' AND
U.USER_ID NOT IN (SELECT USER_ID FROM LOGINS WHERE LOGIN_TIMESTAMP BETWEEN '2023-11-01' AND '2023-11-30');

--4) From the question 2 what is the percentage change in sessions from the last quarter? Return 1st day of quarter, session count, prev session count, %change.

WITH CTE AS
(SELECT DATETRUNC(QUARTER,MIN(LOGIN_TIMESTAMP)) AS QUARTER_1STDAY, COUNT(SESSION_ID) AS SESSION_COUNT,
LAG(COUNT(SESSION_ID))OVER(ORDER BY DATETRUNC(QUARTER,MIN(LOGIN_TIMESTAMP))) AS PREV_SESSION_CNT
FROM LOGINS
GROUP BY DATEPART(QUARTER,LOGIN_TIMESTAMP) 
)
SELECT *, 100.0*(SESSION_COUNT-PREV_SESSION_CNT)/PREV_SESSION_CNT AS PERCENTAGE_CHANGE
FROM CTE
ORDER BY QUARTER_1STDAY;


--5)Which user had the highest session score each day?

WITH CTE AS(SELECT USER_ID,CAST(LOGIN_TIMESTAMP AS DATE) AS LOGIN_DATE, SUM(SESSION_SCORE) AS SCORE,ROW_NUMBER()OVER(PARTITION BY CAST(LOGIN_TIMESTAMP AS DATE) ORDER BY SUM(SESSION_SCORE) DESC) AS RN
FROM LOGINS
GROUP BY USER_ID, CAST(LOGIN_TIMESTAMP AS DATE))
SELECT USER_ID, LOGIN_DATE, SCORE 
FROM CTE
WHERE RN=1
ORDER BY LOGIN_DATE;


--6)Which users have had a session every single day since their first login?'
SELECT USER_ID,MIN(CAST(LOGIN_TIMESTAMP AS DATE))AS FIRST_LOGIN,
DATEDIFF(DAY,MIN(CAST(LOGIN_TIMESTAMP AS DATE)),(SELECT MAX(CAST(LOGIN_TIMESTAMP AS DATE))  FROM LOGINS))+1 AS LOGIN_DAYS_REQ,
COUNT(LOGIN_TIMESTAMP) AS USER_LOGIN_DAYS
FROM LOGINS
GROUP BY USER_ID
HAVING DATEDIFF(DAY,MIN(CAST(LOGIN_TIMESTAMP AS DATE)),(SELECT MAX(CAST(LOGIN_TIMESTAMP AS DATE))  FROM LOGINS))+1 =COUNT(LOGIN_TIMESTAMP); 

--7) On what dates were there no logins at all?

WITH CTE AS(SELECT MIN(CAST(LOGIN_TIMESTAMP AS DATE)) AS FIRST_DAY, MAX(CAST(LOGIN_TIMESTAMP AS DATE)) AS LAST_DAY
FROM LOGINS
UNION ALL
SELECT DATEADD(DAY,1,FIRST_DAY)AS FIST_DAY,LAST_DAY FROM CTE
WHERE FIRST_DAY<LAST_DAY
)
SELECT FIRST_DAY AS NO_LOGIN_DATES FROM CTE
WHERE FIRST_DAY NOT IN (SELECT DISTINCT CAST(LOGIN_TIMESTAMP AS DATE) FROM LOGINS)
OPTION(MAXRECURSION 500)


